;Exercise 3.1

(define (make-accumulator sum)
  (lambda (amount)
    (begin (set! sum (+ sum amount)) sum)))

(define A (make-accumulator 5))
(A 10)
(A 10)
(A -5)

; Exercise 3.2
(display "Exercise 3.2\n")

(define (make-monitored func)
  (let ((mf 0))
    (lambda (input)
      (cond ((eq? input 'how-many-calls?) mf)
            ((eq? input 'reset-count) (begin (set! mf 0) mf))
            (else (begin (set! mf (+ mf 1)) (func input)))))))

(define s (make-monitored sqrt))
(s 100)
(s 25)
(s 'how-many-calls?)
(s 'reset-count)
(s 64)
(s 'how-many-calls?)

; Exercise 3.3
(display "Exercise 3.3\n")
(define (error reason . args)
  (display "Error: ")
  (display reason)
  (for-each (lambda (arg) (display " ") (write arg)) args)
  (lambda (input) (newline)))

(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch input-pw m)
    (cond ((not (eq? input-pw password)) (error "Incorrect password" input-pw))
          ((eq? m `withdraw) withdraw)
          ((eq? m `deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  dispatch)

(define acc (make-account 100 'secret-password))
((acc 'secret-password 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'secret-password 'deposit) 50)

; Exercise 3.4

(define (call-the-cops)
  (display "The cops are alerted about the repeated failed login attempts")
  (lambda (input) (newline)))

(define (make-account balance password)
  (let ((count-access 0))
    (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               (set! count-access 0)
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    (set! count-access 0)
    balance)
  (define (dispatch input-pw m)
    (cond ((= count-access 7) (call-the-cops))
          ((not (eq? input-pw password)) (begin (set! count-access (+ count-access 1))
                                                      (error "Incorrect password" input-pw)))
          ((eq? m `withdraw) withdraw)
          ((eq? m `deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT" m))))
  dispatch))

(define acc (make-account 100 'secret-password))
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)

((acc 'secret-password 'deposit) 50)

((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
((acc 'hacking 'deposit) 50)
