================================================================================
SICP (pp.20-21)
================================================================================

1.1:
10, 12, 8, 3, 6, 19, #f, 4, 16, 6, 16

1.2:
Ans : -37/150

(/ (+ 5 4
      (- 2
        (- 3
          (+ 6
            (/ 4 5)))))
   (* 3
     (- 6 2) (- 2 7)))

1.3: Translate expression into prefix form
(define (compare-num a b)
  (if(or (> a b) (= a b)) #t #f)
)

(define (square a)
  (* a a)
)

(define (sum-max-two-squares a b c)
  (if(compare-num a b)
     (if(compare-num b c)
        (+ (square a) (square b))
        (+ (square a) (square c))
     )
     (if(compare-num a c)
        (+ (square a) (square b))
        (+ (square b) (square c))
     )
  )
)

1.4: Description of procedure behavior
(define (a-plus-abs-b a b)
  ((if (> b 0) + -)) a b)

If b is more than zero, then the body will execute (+ a b). Else it will execute (- a b).

1.5: Testing intepreter for Applicative-order or Normal-order evaluative behavior.

Some definitions:
Applicative-order - the substitution of values are postponed until they are needed. This helps to reduce repeated evaluations in the procedure. LISP uses Applicative-order type.

Normal-order - the values are substituted in each steps of the evaluation.

(define (p) (p))
(define (test x y)
  (if (= x 0) 0 y))

;Testcase
(test 0 (p))

If the interpreter is using applicative-order evaluation then the (p) would go into infinite call into itself and the evaluation process would be in a loop.

However if the interpreter is using normal-order evaluation, then the value of x would be substituted to become:
(if(= 0 0) 0 (p))
Since (if(#t) 0 (p)), the program will print 0.
